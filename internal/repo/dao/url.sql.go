// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: url.sql

package dao

import (
	"context"
	"time"
)

const getIDByURL = `-- name: GetIDByURL :one
SELECT (id)
FROM "urls"
WHERE "url" = ($1)
`

func (q *Queries) GetIDByURL(ctx context.Context, url string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getIDByURL, url)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertURL = `-- name: InsertURL :one
INSERT INTO "urls" (id, url, created_at, count) VALUES ($1, $2, $3, $4) RETURNING id, url, created_at, count
`

type InsertURLParams struct {
	ID        int64
	Url       string
	CreatedAt time.Time
	Count     int64
}

func (q *Queries) InsertURL(ctx context.Context, arg InsertURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, insertURL,
		arg.ID,
		arg.Url,
		arg.CreatedAt,
		arg.Count,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.CreatedAt,
		&i.Count,
	)
	return i, err
}

const updateCountByID = `-- name: UpdateCountByID :one
UPDATE "urls"
SET count = urls.count + 1
WHERE "id" = ($1)
RETURNING id, url, created_at, count
`

func (q *Queries) UpdateCountByID(ctx context.Context, id int64) (Url, error) {
	row := q.db.QueryRowContext(ctx, updateCountByID, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.CreatedAt,
		&i.Count,
	)
	return i, err
}
